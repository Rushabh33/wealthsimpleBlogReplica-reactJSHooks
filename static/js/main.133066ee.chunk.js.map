{"version":3,"sources":["assets/placeHolderImage.svg","components/Logo.js","components/Navbar.js","components/blogPage/BlogHero.js","components/blogPage/PostMetaInfo.js","components/blogPage/PostCard.js","components/blogPage/FeaturedPost.js","components/blogPage/PostCategory.js","components/blogPage/PostCategories.js","components/blogPage/PostCategoriesContainer.js","components/blogPage/Footer.js","components/blogPage/BlogPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","className","Navbar","href","BlogHero","PostMetaInfo","postInfo","postDescription","title","PostCard","isFeaturedPost","useState","postImage","setPostImage","setPostDescription","useEffect","require","ogs","url","error","results","PlaceHolderImage","data","ogImage","ogDescription","imgDivClass","infoDivClass","src","alt","FeaturedPost","featuredPostData","PostCategory","postsToDisplay","handleScrollLoading","postsPerPage","isCategoryAPosts","setLoading","length","slice","thumbnailPosts","displayThesePosts","setDisplayThesePosts","activateScrollLoading","setActivateScrollLoading","loadMore","setLoadMore","window","addEventListener","handleScroll","removeEventListener","categoryBContainer","document","getElementById","innerHeight","scrollY","clientHeight","offsetTop","map","post","id","onClick","e","preventDefault","PostCategories","listOfPosts","categoryAPosts","PostCategoriesContainer","topArticleIDs","setTopArticleIDs","setListOfPosts","lastDisplayedPostIndex","setLastDisplayedPostIndex","setFeaturedPostData","getHackerNewsAPI","query","a","queryCategory","proxy","fetch","response","json","then","addToListOfPostsToDisplay","getListofPosts","listOfPostsToDisplay","Promise","all","Footer","BlogPage","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.133066ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/placeHolderImage.a0e83bac.svg\";","import React from 'react'\n// import wealthsimpleLogo from '../assets/wealthsimpleLogoWhiteBackground.png'\n\nconst Logo = () => {\n  return (\n    <div className='logo'>\n    </div>\n  )\n}\n\nexport default Logo\n","import React from 'react'\nimport Logo from './Logo'\n\n\nconst Navbar = () => {\n  return (\n    <nav>\n      <div className='wrapper'>\n        <div className='wrapper navigation'>\n          <Logo />\n          <ul>\n            <li><a href=\"\">Magazine</a></li>\n            <li className='callToAction'><a href=\"\">Start Investing</a></li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  )\n}\n\nexport default Navbar\n","import React from 'react'\nimport Logo from '../Logo'\n\nconst BlogHero = () => {\n  return (\n    <section className='blogHero'>\n      < Logo />\n      <h1>Magazine</h1>\n      <h3>stories and ideas from wealthsimple</h3>\n    </section>\n  )\n}\n\nexport default BlogHero\n","import React, { useState, useEffect } from 'react'\n\nconst PostMetaInfo = ({ postInfo, postDescription }) => {\n  // console.log(postInfo['title'])\n  return (\n    <div className='postMetaInfoContainer'>\n      <span className=\"postCategory\">money diaries</span>\n      <h3 className=\"postTitle\">{postInfo ? postInfo.title : 'loading'}</h3>\n      <p>{postDescription ? postDescription : 'loading'}</p>\n    </div>\n  )\n}\n\nexport default PostMetaInfo\n","import React, { useState, useEffect } from 'react'\nimport PostMetaInfo from './PostMetaInfo'\nimport PlaceHolderImage from '../../assets/placeHolderImage.svg'\n\nconst PostCard = ({ postInfo, isFeaturedPost = false }) => {\n  const [postImage, setPostImage] = useState('')\n  const [postDescription, setPostDescription] = useState('')\n\n  useEffect(() => {\n    var ogs = require('open-graph-scraper');\n    const proxy = 'https://cors-anywhere.herokuapp.com/'\n    var options = { 'url': proxy + postInfo.url };\n    ogs(options, function (error, results) {\n      if (error) {\n        setPostImage(PlaceHolderImage)\n        setPostDescription('Page Not Found')\n        return\n      }\n      setPostImage(results.data.ogImage.url)\n      setPostDescription(results.data.ogDescription)\n    });\n  }, [])\n\n  const imgDivClass = isFeaturedPost ? 'featuredPostImageContainer' : 'postImageContainer'\n  const infoDivClass = isFeaturedPost ? 'featuredPostInfoContainer' : 'postInfoContainer'\n\n  return (\n    <a href={postInfo ? postInfo.url : null}>\n      <div className={imgDivClass}>\n        <img src={postImage} alt={postInfo.title} />\n      </div>\n      <div className={infoDivClass}>\n        <PostMetaInfo postInfo={postInfo} postDescription={postDescription} />\n      </div>\n    </a>\n  )\n}\n\nexport default PostCard","import React from 'react'\nimport PostCard from './PostCard'\nimport PostMetaInfo from './PostMetaInfo'\n\nconst FeaturedPost = ({ featuredPostData }) => {\n\n  return (\n    <section className='featuredPost'>\n      {featuredPostData ? <PostCard postInfo={featuredPostData} isFeaturedPost={true} /> : <div>loading</div>}\n    </section>\n  )\n}\n\nexport default FeaturedPost\n\n\n\n// <a href=\"\">\n// <img src=\"\" alt=\"\" />\n// <PostMetaInfo postToDisplay={postToDisplay} />\n// </a>","import React, { useState, useEffect } from 'react'\nimport PostCard from './PostCard'\n\n// right now doing the category with items to display\nconst PostCategory = ({ postsToDisplay, handleScrollLoading, postsPerPage, setLoading }) => {\n  const isCategoryAPosts = postsToDisplay.length < postsPerPage\n  const [thumbnailPosts, setThumbnailPosts] = useState(postsToDisplay.slice(0, 4))\n  const [displayThesePosts, setDisplayThesePosts] = useState(postsToDisplay)\n  const [activateScrollLoading, setActivateScrollLoading] = useState(false)\n  const [loadMore, setLoadMore] = useState(false)\n\n  const displayPosts = (data) => {\n    return data.map(post => {\n      return (\n        <li className='postCard'>\n          <PostCard postInfo={post} isFeaturedPost={false} />\n        </li>\n      )\n    })\n  }\n\n  const handleClick = (e) => {\n    e.preventDefault()\n    setActivateScrollLoading(true)\n  }\n\n  useEffect(() => {\n    if (activateScrollLoading && !isCategoryAPosts) {\n      window.addEventListener('scroll', handleScroll);\n      return () => window.removeEventListener('scroll', handleScroll);\n    }\n  }, [activateScrollLoading]);\n\n  const handleScroll = () => {\n    const categoryBContainer = document.getElementById('categoryBContainer')\n    if (window.innerHeight + window.scrollY >= categoryBContainer.clientHeight + categoryBContainer.offsetTop) {\n      setLoadMore(true)\n    }\n  }\n\n  useEffect(() => {\n    if (!loadMore) return\n    handleScrollLoading()\n  }, [loadMore])\n\n\n  useEffect(() => {\n    setDisplayThesePosts(postsToDisplay)\n    setLoadMore(false)\n  }, [postsToDisplay])\n\n  return (\n    <div className='postCategory'>\n      <ul className='postList'>\n        {displayPosts(activateScrollLoading ? displayThesePosts : thumbnailPosts)}\n        {loadMore ? <div className='loadingDiv'>loading</div> : null}\n      </ul>\n      <div id={isCategoryAPosts ? null : 'categoryBContainer'} className='readMoreContainer'>\n        <button\n          className={isCategoryAPosts ? 'hidden' : null}\n          onClick={handleClick}>read more</button>\n      </div>\n    </div>\n  )\n}\n\nexport default PostCategory\n","import React, { useState } from 'react'\nimport FeaturedPost from './FeaturedPost'\nimport PostCategory from './PostCategory'\n\nconst PostCategories = ({ listOfPosts, handleScrollLoading, postsPerPage, setLoading }) => {\n  // 21239704 has image and description. Good for featured.\n  // const [featuredPost, setFeaturedPost] = useState(21239704)\n  const [categoryAPosts, setCategoryAPosts] = useState(listOfPosts.slice(0, 4))\n  // const [categoryBPosts, setCategoryBPosts] = useState(listOfPosts)\n\n  return (\n    <div>\n      <PostCategory postsToDisplay={categoryAPosts} handleScrollLoading={handleScrollLoading} postsPerPage={postsPerPage} setLoading={setLoading} />\n      <PostCategory postsToDisplay={listOfPosts} handleScrollLoading={handleScrollLoading} postsPerPage={postsPerPage} setLoading={setLoading} />\n    </div>\n  )\n}\n\nexport default PostCategories\n","import React, { useState, useEffect } from 'react'\nimport PostCategories from './PostCategories'\nimport FeaturedPost from './FeaturedPost'\n\nconst PostCategoriesContainer = () => {\n\n  const [topArticleIDs, setTopArticleIDs] = useState([])\n  const [listOfPosts, setListOfPosts] = useState([])\n  const [lastDisplayedPostIndex, setLastDisplayedPostIndex] = useState(0)\n  const [postsPerPage, setPostsPerPage] = useState(30)\n  const [loading, setLoading] = useState(false)\n  const [featuredPostData, setFeaturedPostData] = useState({})\n\n  const getHackerNewsAPI = async (query, queryCategory = '') => {\n    const url = `https://hacker-news.firebaseio.com/v0/${queryCategory + '/'}${query}.json`\n    const proxy = 'https://cors-anywhere.herokuapp.com/'\n    const response = await fetch(proxy + url);\n    const data = await response.json();\n    return data;\n  }\n\n  useEffect(() => {\n    getHackerNewsAPI('topstories').then(data => setTopArticleIDs(data))\n    getHackerNewsAPI(21239704, 'item').then(data => {\n      setFeaturedPostData(data)\n    })\n  }, [])\n\n  useEffect(() => {\n    addToListOfPostsToDisplay()\n  }, [topArticleIDs])\n\n  const addToListOfPostsToDisplay = () => {\n    if (listOfPosts.length < 501) {\n      return getListofPosts().then(data => {\n        setListOfPosts([...listOfPosts, ...data])\n        setLastDisplayedPostIndex(lastDisplayedPostIndex + postsPerPage)\n        setLoading(false)\n      })\n    }\n  }\n\n  const getListofPosts = async () => {\n    const listOfPostsToDisplay = topArticleIDs.slice(lastDisplayedPostIndex, lastDisplayedPostIndex + postsPerPage)\n    return await Promise.all(listOfPostsToDisplay.map(id => getHackerNewsAPI(id, 'item')))\n  }\n\n\n\n  const handleScrollLoading = () => {\n    addToListOfPostsToDisplay()\n  }\n\n  return (\n    <div className='postCategoriesContainer'>\n      {listOfPosts.length\n        ? <div className='wrapper'>\n          <FeaturedPost featuredPostData={featuredPostData} />\n          <PostCategories listOfPosts={listOfPosts} handleScrollLoading={handleScrollLoading} postsPerPage={postsPerPage} setLoading={setLoading} featuredPostData={featuredPostData} />\n        </div>\n        : <div>loading</div>}\n    </div>\n  )\n}\n\nexport default PostCategoriesContainer\n","import React from 'react'\n\nconst Footer = () => {\n  return (\n    <div className='footer'>\n      <div>By using this website, you accept our Terms of Use and Privacy Policy. Copyright 2019 Wealthsimple Technologies Inc.`</div>\n    </div>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport BlogHero from './BlogHero'\nimport PostCategoriesContainer from './PostCategoriesContainer'\nimport Footer from './Footer'\n\nconst BlogPage = () => {\n  return (\n    <>\n      <main>\n        <BlogHero />\n        {/* filter component here */}\n        <PostCategoriesContainer />\n        <Footer />\n      </main>\n    </>\n  )\n}\n\nexport default BlogPage\n","import React from 'react'\nimport './App.scss';\nimport Navbar from './components/Navbar'\nimport BlogPage from './components/blogPage/BlogPage';\n\n\nconst App = () => {\n  return (\n    <div>\n      <Navbar />\n      <BlogPage />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}